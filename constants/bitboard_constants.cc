/* Lookup tables used with bitboards in Taltos */
/* Generated file, do not edit manually */

#include "bitboard.h"

namespace taltos
{

#define C(x) bitboard::from_int(UINT64_C(x))

const std::array<bitboard, 64> king_pattern = {
	C(0x0000000000000302), C(0x0000000000000705),
	C(0x0000000000000e0a), C(0x0000000000001c14),
	C(0x0000000000003828), C(0x0000000000007050),
	C(0x000000000000e0a0), C(0x000000000000c040),
	C(0x0000000000030203), C(0x0000000000070507),
	C(0x00000000000e0a0e), C(0x00000000001c141c),
	C(0x0000000000382838), C(0x0000000000705070),
	C(0x0000000000e0a0e0), C(0x0000000000c040c0),
	C(0x0000000003020300), C(0x0000000007050700),
	C(0x000000000e0a0e00), C(0x000000001c141c00),
	C(0x0000000038283800), C(0x0000000070507000),
	C(0x00000000e0a0e000), C(0x00000000c040c000),
	C(0x0000000302030000), C(0x0000000705070000),
	C(0x0000000e0a0e0000), C(0x0000001c141c0000),
	C(0x0000003828380000), C(0x0000007050700000),
	C(0x000000e0a0e00000), C(0x000000c040c00000),
	C(0x0000030203000000), C(0x0000070507000000),
	C(0x00000e0a0e000000), C(0x00001c141c000000),
	C(0x0000382838000000), C(0x0000705070000000),
	C(0x0000e0a0e0000000), C(0x0000c040c0000000),
	C(0x0003020300000000), C(0x0007050700000000),
	C(0x000e0a0e00000000), C(0x001c141c00000000),
	C(0x0038283800000000), C(0x0070507000000000),
	C(0x00e0a0e000000000), C(0x00c040c000000000),
	C(0x0302030000000000), C(0x0705070000000000),
	C(0x0e0a0e0000000000), C(0x1c141c0000000000),
	C(0x3828380000000000), C(0x7050700000000000),
	C(0xe0a0e00000000000), C(0xc040c00000000000),
	C(0x0203000000000000), C(0x0507000000000000),
	C(0x0a0e000000000000), C(0x141c000000000000),
	C(0x2838000000000000), C(0x5070000000000000),
	C(0xa0e0000000000000), C(0x40c0000000000000)
};

const std::array<bitboard, 64> knight_pattern = {
	C(0x0000000000020400), C(0x0000000000050800),
	C(0x00000000000a1100), C(0x0000000000142200),
	C(0x0000000000284400), C(0x0000000000508800),
	C(0x0000000000a01000), C(0x0000000000402000),
	C(0x0000000002040004), C(0x0000000005080008),
	C(0x000000000a110011), C(0x0000000014220022),
	C(0x0000000028440044), C(0x0000000050880088),
	C(0x00000000a0100010), C(0x0000000040200020),
	C(0x0000000204000402), C(0x0000000508000805),
	C(0x0000000a1100110a), C(0x0000001422002214),
	C(0x0000002844004428), C(0x0000005088008850),
	C(0x000000a0100010a0), C(0x0000004020002040),
	C(0x0000020400040200), C(0x0000050800080500),
	C(0x00000a1100110a00), C(0x0000142200221400),
	C(0x0000284400442800), C(0x0000508800885000),
	C(0x0000a0100010a000), C(0x0000402000204000),
	C(0x0002040004020000), C(0x0005080008050000),
	C(0x000a1100110a0000), C(0x0014220022140000),
	C(0x0028440044280000), C(0x0050880088500000),
	C(0x00a0100010a00000), C(0x0040200020400000),
	C(0x0204000402000000), C(0x0508000805000000),
	C(0x0a1100110a000000), C(0x1422002214000000),
	C(0x2844004428000000), C(0x5088008850000000),
	C(0xa0100010a0000000), C(0x4020002040000000),
	C(0x0400040200000000), C(0x0800080500000000),
	C(0x1100110a00000000), C(0x2200221400000000),
	C(0x4400442800000000), C(0x8800885000000000),
	C(0x100010a000000000), C(0x2000204000000000),
	C(0x0004020000000000), C(0x0008050000000000),
	C(0x00110a0000000000), C(0x0022140000000000),
	C(0x0044280000000000), C(0x0088500000000000),
	C(0x0010a00000000000), C(0x0020400000000000)
};

const std::array<bitboard, 64> diag_masks = {
	C(0x0000000000000000), C(0x0000000000000100),
	C(0x0000000000010200), C(0x0000000001020400),
	C(0x0000000102040800), C(0x0000010204081000),
	C(0x0001020408102000), C(0x0102040810204000),
	C(0x0000000000000002), C(0x0000000000010004),
	C(0x0000000001020008), C(0x0000000102040010),
	C(0x0000010204080020), C(0x0001020408100040),
	C(0x0102040810200080), C(0x0204081020400000),
	C(0x0000000000000204), C(0x0000000001000408),
	C(0x0000000102000810), C(0x0000010204001020),
	C(0x0001020408002040), C(0x0102040810004080),
	C(0x0204081020008000), C(0x0408102040000000),
	C(0x0000000000020408), C(0x0000000100040810),
	C(0x0000010200081020), C(0x0001020400102040),
	C(0x0102040800204080), C(0x0204081000408000),
	C(0x0408102000800000), C(0x0810204000000000),
	C(0x0000000002040810), C(0x0000010004081020),
	C(0x0001020008102040), C(0x0102040010204080),
	C(0x0204080020408000), C(0x0408100040800000),
	C(0x0810200080000000), C(0x1020400000000000),
	C(0x0000000204081020), C(0x0001000408102040),
	C(0x0102000810204080), C(0x0204001020408000),
	C(0x0408002040800000), C(0x0810004080000000),
	C(0x1020008000000000), C(0x2040000000000000),
	C(0x0000020408102040), C(0x0100040810204080),
	C(0x0200081020408000), C(0x0400102040800000),
	C(0x0800204080000000), C(0x1000408000000000),
	C(0x2000800000000000), C(0x4000000000000000),
	C(0x0002040810204080), C(0x0004081020408000),
	C(0x0008102040800000), C(0x0010204080000000),
	C(0x0020408000000000), C(0x0040800000000000),
	C(0x0080000000000000), C(0x0000000000000000)
};

const std::array<bitboard, 64> adiag_masks = {
	C(0x8040201008040200), C(0x0080402010080400),
	C(0x0000804020100800), C(0x0000008040201000),
	C(0x0000000080402000), C(0x0000000000804000),
	C(0x0000000000008000), C(0x0000000000000000),
	C(0x4020100804020000), C(0x8040201008040001),
	C(0x0080402010080002), C(0x0000804020100004),
	C(0x0000008040200008), C(0x0000000080400010),
	C(0x0000000000800020), C(0x0000000000000040),
	C(0x2010080402000000), C(0x4020100804000100),
	C(0x8040201008000201), C(0x0080402010000402),
	C(0x0000804020000804), C(0x0000008040001008),
	C(0x0000000080002010), C(0x0000000000004020),
	C(0x1008040200000000), C(0x2010080400010000),
	C(0x4020100800020100), C(0x8040201000040201),
	C(0x0080402000080402), C(0x0000804000100804),
	C(0x0000008000201008), C(0x0000000000402010),
	C(0x0804020000000000), C(0x1008040001000000),
	C(0x2010080002010000), C(0x4020100004020100),
	C(0x8040200008040201), C(0x0080400010080402),
	C(0x0000800020100804), C(0x0000000040201008),
	C(0x0402000000000000), C(0x0804000100000000),
	C(0x1008000201000000), C(0x2010000402010000),
	C(0x4020000804020100), C(0x8040001008040201),
	C(0x0080002010080402), C(0x0000004020100804),
	C(0x0200000000000000), C(0x0400010000000000),
	C(0x0800020100000000), C(0x1000040201000000),
	C(0x2000080402010000), C(0x4000100804020100),
	C(0x8000201008040201), C(0x0000402010080402),
	C(0x0000000000000000), C(0x0001000000000000),
	C(0x0002010000000000), C(0x0004020100000000),
	C(0x0008040201000000), C(0x0010080402010000),
	C(0x0020100804020100), C(0x0040201008040201)
};

const std::array<bitboard, 64> hor_masks = {
	C(0x00000000000000fe), C(0x00000000000000fd),
	C(0x00000000000000fb), C(0x00000000000000f7),
	C(0x00000000000000ef), C(0x00000000000000df),
	C(0x00000000000000bf), C(0x000000000000007f),
	C(0x000000000000fe00), C(0x000000000000fd00),
	C(0x000000000000fb00), C(0x000000000000f700),
	C(0x000000000000ef00), C(0x000000000000df00),
	C(0x000000000000bf00), C(0x0000000000007f00),
	C(0x0000000000fe0000), C(0x0000000000fd0000),
	C(0x0000000000fb0000), C(0x0000000000f70000),
	C(0x0000000000ef0000), C(0x0000000000df0000),
	C(0x0000000000bf0000), C(0x00000000007f0000),
	C(0x00000000fe000000), C(0x00000000fd000000),
	C(0x00000000fb000000), C(0x00000000f7000000),
	C(0x00000000ef000000), C(0x00000000df000000),
	C(0x00000000bf000000), C(0x000000007f000000),
	C(0x000000fe00000000), C(0x000000fd00000000),
	C(0x000000fb00000000), C(0x000000f700000000),
	C(0x000000ef00000000), C(0x000000df00000000),
	C(0x000000bf00000000), C(0x0000007f00000000),
	C(0x0000fe0000000000), C(0x0000fd0000000000),
	C(0x0000fb0000000000), C(0x0000f70000000000),
	C(0x0000ef0000000000), C(0x0000df0000000000),
	C(0x0000bf0000000000), C(0x00007f0000000000),
	C(0x00fe000000000000), C(0x00fd000000000000),
	C(0x00fb000000000000), C(0x00f7000000000000),
	C(0x00ef000000000000), C(0x00df000000000000),
	C(0x00bf000000000000), C(0x007f000000000000),
	C(0xfe00000000000000), C(0xfd00000000000000),
	C(0xfb00000000000000), C(0xf700000000000000),
	C(0xef00000000000000), C(0xdf00000000000000),
	C(0xbf00000000000000), C(0x7f00000000000000)
};

const std::array<bitboard, 64> ver_masks = {
	C(0x0101010101010100), C(0x0202020202020200),
	C(0x0404040404040400), C(0x0808080808080800),
	C(0x1010101010101000), C(0x2020202020202000),
	C(0x4040404040404000), C(0x8080808080808000),
	C(0x0101010101010001), C(0x0202020202020002),
	C(0x0404040404040004), C(0x0808080808080008),
	C(0x1010101010100010), C(0x2020202020200020),
	C(0x4040404040400040), C(0x8080808080800080),
	C(0x0101010101000101), C(0x0202020202000202),
	C(0x0404040404000404), C(0x0808080808000808),
	C(0x1010101010001010), C(0x2020202020002020),
	C(0x4040404040004040), C(0x8080808080008080),
	C(0x0101010100010101), C(0x0202020200020202),
	C(0x0404040400040404), C(0x0808080800080808),
	C(0x1010101000101010), C(0x2020202000202020),
	C(0x4040404000404040), C(0x8080808000808080),
	C(0x0101010001010101), C(0x0202020002020202),
	C(0x0404040004040404), C(0x0808080008080808),
	C(0x1010100010101010), C(0x2020200020202020),
	C(0x4040400040404040), C(0x8080800080808080),
	C(0x0101000101010101), C(0x0202000202020202),
	C(0x0404000404040404), C(0x0808000808080808),
	C(0x1010001010101010), C(0x2020002020202020),
	C(0x4040004040404040), C(0x8080008080808080),
	C(0x0100010101010101), C(0x0200020202020202),
	C(0x0400040404040404), C(0x0800080808080808),
	C(0x1000101010101010), C(0x2000202020202020),
	C(0x4000404040404040), C(0x8000808080808080),
	C(0x0001010101010101), C(0x0002020202020202),
	C(0x0004040404040404), C(0x0008080808080808),
	C(0x0010101010101010), C(0x0020202020202020),
	C(0x0040404040404040), C(0x0080808080808080)
};

const std::array<bitboard, 64> bishop_masks = {
	C(0x8040201008040200), C(0x0080402010080500),
	C(0x0000804020110a00), C(0x0000008041221400),
	C(0x0000000182442800), C(0x0000010204885000),
	C(0x000102040810a000), C(0x0102040810204000),
	C(0x4020100804020002), C(0x8040201008050005),
	C(0x00804020110a000a), C(0x0000804122140014),
	C(0x0000018244280028), C(0x0001020488500050),
	C(0x0102040810a000a0), C(0x0204081020400040),
	C(0x2010080402000204), C(0x4020100805000508),
	C(0x804020110a000a11), C(0x0080412214001422),
	C(0x0001824428002844), C(0x0102048850005088),
	C(0x02040810a000a010), C(0x0408102040004020),
	C(0x1008040200020408), C(0x2010080500050810),
	C(0x4020110a000a1120), C(0x8041221400142241),
	C(0x0182442800284482), C(0x0204885000508804),
	C(0x040810a000a01008), C(0x0810204000402010),
	C(0x0804020002040810), C(0x1008050005081020),
	C(0x20110a000a112040), C(0x4122140014224180),
	C(0x8244280028448201), C(0x0488500050880402),
	C(0x0810a000a0100804), C(0x1020400040201008),
	C(0x0402000204081020), C(0x0805000508102040),
	C(0x110a000a11204080), C(0x2214001422418000),
	C(0x4428002844820100), C(0x8850005088040201),
	C(0x10a000a010080402), C(0x2040004020100804),
	C(0x0200020408102040), C(0x0500050810204080),
	C(0x0a000a1120408000), C(0x1400142241800000),
	C(0x2800284482010000), C(0x5000508804020100),
	C(0xa000a01008040201), C(0x4000402010080402),
	C(0x0002040810204080), C(0x0005081020408000),
	C(0x000a112040800000), C(0x0014224180000000),
	C(0x0028448201000000), C(0x0050880402010000),
	C(0x00a0100804020100), C(0x0040201008040201)
};

const std::array<bitboard, 64> rook_masks = {
	C(0x01010101010101fe), C(0x02020202020202fd),
	C(0x04040404040404fb), C(0x08080808080808f7),
	C(0x10101010101010ef), C(0x20202020202020df),
	C(0x40404040404040bf), C(0x808080808080807f),
	C(0x010101010101fe01), C(0x020202020202fd02),
	C(0x040404040404fb04), C(0x080808080808f708),
	C(0x101010101010ef10), C(0x202020202020df20),
	C(0x404040404040bf40), C(0x8080808080807f80),
	C(0x0101010101fe0101), C(0x0202020202fd0202),
	C(0x0404040404fb0404), C(0x0808080808f70808),
	C(0x1010101010ef1010), C(0x2020202020df2020),
	C(0x4040404040bf4040), C(0x80808080807f8080),
	C(0x01010101fe010101), C(0x02020202fd020202),
	C(0x04040404fb040404), C(0x08080808f7080808),
	C(0x10101010ef101010), C(0x20202020df202020),
	C(0x40404040bf404040), C(0x808080807f808080),
	C(0x010101fe01010101), C(0x020202fd02020202),
	C(0x040404fb04040404), C(0x080808f708080808),
	C(0x101010ef10101010), C(0x202020df20202020),
	C(0x404040bf40404040), C(0x8080807f80808080),
	C(0x0101fe0101010101), C(0x0202fd0202020202),
	C(0x0404fb0404040404), C(0x0808f70808080808),
	C(0x1010ef1010101010), C(0x2020df2020202020),
	C(0x4040bf4040404040), C(0x80807f8080808080),
	C(0x01fe010101010101), C(0x02fd020202020202),
	C(0x04fb040404040404), C(0x08f7080808080808),
	C(0x10ef101010101010), C(0x20df202020202020),
	C(0x40bf404040404040), C(0x807f808080808080),
	C(0xfe01010101010101), C(0xfd02020202020202),
	C(0xfb04040404040404), C(0xf708080808080808),
	C(0xef10101010101010), C(0xdf20202020202020),
	C(0xbf40404040404040), C(0x7f80808080808080)
};

const std::array<bitboard, 64> pawn_attacks_north = {
	C(0x0000000000000000), C(0x0000000000000000),
	C(0x0000000000000000), C(0x0000000000000000),
	C(0x0000000000000000), C(0x0000000000000000),
	C(0x0000000000000000), C(0x0000000000000000),
	C(0x0000000000000002), C(0x0000000000000005),
	C(0x000000000000000a), C(0x0000000000000014),
	C(0x0000000000000028), C(0x0000000000000050),
	C(0x00000000000000a0), C(0x0000000000000040),
	C(0x0000000000000200), C(0x0000000000000500),
	C(0x0000000000000a00), C(0x0000000000001400),
	C(0x0000000000002800), C(0x0000000000005000),
	C(0x000000000000a000), C(0x0000000000004000),
	C(0x0000000000020000), C(0x0000000000050000),
	C(0x00000000000a0000), C(0x0000000000140000),
	C(0x0000000000280000), C(0x0000000000500000),
	C(0x0000000000a00000), C(0x0000000000400000),
	C(0x0000000002000000), C(0x0000000005000000),
	C(0x000000000a000000), C(0x0000000014000000),
	C(0x0000000028000000), C(0x0000000050000000),
	C(0x00000000a0000000), C(0x0000000040000000),
	C(0x0000000200000000), C(0x0000000500000000),
	C(0x0000000a00000000), C(0x0000001400000000),
	C(0x0000002800000000), C(0x0000005000000000),
	C(0x000000a000000000), C(0x0000004000000000),
	C(0x0000020000000000), C(0x0000050000000000),
	C(0x00000a0000000000), C(0x0000140000000000),
	C(0x0000280000000000), C(0x0000500000000000),
	C(0x0000a00000000000), C(0x0000400000000000),
	C(0x0002000000000000), C(0x0005000000000000),
	C(0x000a000000000000), C(0x0014000000000000),
	C(0x0028000000000000), C(0x0050000000000000),
	C(0x00a0000000000000), C(0x0040000000000000)
};

const std::array<bitboard, 64> pawn_attacks_south = {
	C(0x0000000000000200), C(0x0000000000000500),
	C(0x0000000000000a00), C(0x0000000000001400),
	C(0x0000000000002800), C(0x0000000000005000),
	C(0x000000000000a000), C(0x0000000000004000),
	C(0x0000000000020000), C(0x0000000000050000),
	C(0x00000000000a0000), C(0x0000000000140000),
	C(0x0000000000280000), C(0x0000000000500000),
	C(0x0000000000a00000), C(0x0000000000400000),
	C(0x0000000002000000), C(0x0000000005000000),
	C(0x000000000a000000), C(0x0000000014000000),
	C(0x0000000028000000), C(0x0000000050000000),
	C(0x00000000a0000000), C(0x0000000040000000),
	C(0x0000000200000000), C(0x0000000500000000),
	C(0x0000000a00000000), C(0x0000001400000000),
	C(0x0000002800000000), C(0x0000005000000000),
	C(0x000000a000000000), C(0x0000004000000000),
	C(0x0000020000000000), C(0x0000050000000000),
	C(0x00000a0000000000), C(0x0000140000000000),
	C(0x0000280000000000), C(0x0000500000000000),
	C(0x0000a00000000000), C(0x0000400000000000),
	C(0x0002000000000000), C(0x0005000000000000),
	C(0x000a000000000000), C(0x0014000000000000),
	C(0x0028000000000000), C(0x0050000000000000),
	C(0x00a0000000000000), C(0x0040000000000000),
	C(0x0200000000000000), C(0x0500000000000000),
	C(0x0a00000000000000), C(0x1400000000000000),
	C(0x2800000000000000), C(0x5000000000000000),
	C(0xa000000000000000), C(0x4000000000000000),
	C(0x0000000000000000), C(0x0000000000000000),
	C(0x0000000000000000), C(0x0000000000000000),
	C(0x0000000000000000), C(0x0000000000000000),
	C(0x0000000000000000), C(0x0000000000000000)
};
}
